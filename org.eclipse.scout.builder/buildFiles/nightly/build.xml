<!--
   Copyright (c) 2010 BSI Business Systems Integration AG.
   All rights reserved. This program and the accompanying materials
   are made available under the terms of the Eclipse Public License v1.0
   which accompanies this distribution, and is available at
   http://www.eclipse.org/legal/epl-v10.html
   
   Contributors:
       BSI Business Systems Integration AG - initial API and implementation
 -->

<project name="org.eclipse.scout.build.nightly" default="build">
	<property environment="env" />
	<property file="nightly/build.properties" />

	<target name="clean" depends="cleanSign">
		<delete dir="${workingDir}" />
		<delete dir="${buildBundle}/output/features" />
		<delete dir="${buildBundle}/output/p2Repo" />

	</target>

	<target name="cleanSign" unless="skipSign">
		<delete dir="${signOutputFolder}" />
		<delete dir="${signInputFolder}" />
	</target>

	<target name="setup" depends="setupSign">
		<mkdir dir="${workingDir}" />
		<mkdir dir="${buildBundle}/output/features" />
		<mkdir dir="${buildBundle}/output/p2Repo" />
		<ant antfile="${buildBundle}/buildFiles/setupEclipse.xml" target="setupEclipse" />
		<ant antfile="${buildBundle}/buildFiles/setupWorkspace.xml" target="setupBuildWorkspace" />
	</target>

	<target name="setupSign" unless="skipSign">
		<mkdir dir="${signInputFolder}" />
		<mkdir dir="${signOutputFolder}" />
	</target>

	<target name="build" depends="clean, setup, buildScoutRtFeature,  
		buildScoutSdkFeature,  createP2Repository,signP2Repository, publish">
	</target>

	<target name="buildScoutRtFeature">
		<echo message="build feature" />
		<java classname="org.eclipse.equinox.launcher.Main" fork="true" failonerror="true">
			<arg line="-application org.eclipse.ant.core.antRunner " />
			<arg line="-buildfile ${workingDir}/eclipse/plugins/org.eclipse.pde.build_${pdeBuildPluginVersion}/scripts/build.xml" />
			<arg line="-Dtimestamp=${timestamp}" />
			<arg line="-DarchivePrefix=rtFeature" />
			<!--			<arg line="-DbuildId=ScoutRt" />  -->
			<arg line="-DtopLevelElementId=org.eclipse.scout.rt.feature" />
			<arg line="-Dbuilder=${buildBundle}/buildFiles/featureBuild" />
			<arg line="-Dworkspace=${env.WORKSPACE}" />
			<arg line="-DIndividualSourceBundles=true" />
			<classpath>
				<pathelement location="${workingDir}/eclipse/plugins/org.eclipse.equinox.launcher_${equinoxLauncherPluginVersion}.jar" />
			</classpath>
		</java>
		<mkdir dir="${buildBundle}/output/features" />
		<unzip dest="${buildBundle}/output/features">
			<fileset dir="${buildWorkspace}/N">
				<include name="org.eclipse.scout.rt.feature-N.zip" />
			</fileset>
		</unzip>
	</target>

	<target name="signScoutRtFeature" depends="internal.signScoutRtFeature, cleanSign">
		<mkdir dir="${buildBundle}/output/features" />
		<unzip dest="${buildBundle}/output/features">
			<fileset dir="${buildWorkspace}/N">
				<include name="org.eclipse.scout.rt.feature-N.zip" />
			</fileset>
		</unzip>
	</target>

	<target name="internal.signScoutRtFeature" unless="skipSign">
		<move file="${buildWorkspace}/N/org.eclipse.scout.rt.feature-N.zip" tofile="${signInputFolder}/sign.zip" />
		<ant antfile="sign.xml" target="signAndWaitResult" />
		<move file="${signOutputFolder}/sign.zip" tofile="${buildWorkspace}/N/org.eclipse.scout.rt.feature-N.zip" />
	</target>


	<target name="buildScoutSdkFeature">
		<echo message="build feature" />
		<java classname="org.eclipse.equinox.launcher.Main" fork="true" failonerror="true">
			<arg line="-application org.eclipse.ant.core.antRunner " />
			<arg line="-buildfile ${workingDir}/eclipse/plugins/org.eclipse.pde.build_${pdeBuildPluginVersion}/scripts/build.xml" />
			<arg line="-Dtimestamp=${timestamp}" />
			<arg line="-DarchivePrefix=sdkFeature" />
			<!--			<arg line="-DbuildId=ScoutRt" />  -->
			<arg line="-DtopLevelElementId=org.eclipse.scout.sdk.feature" />
			<arg line="-Dbuilder=${buildBundle}/buildFiles/featureBuild" />
			<arg line="-Dworkspace=${env.WORKSPACE}" />
			<arg line="-DIndividualSourceBundles=true" />
			<classpath>
				<pathelement location="${workingDir}/eclipse/plugins/org.eclipse.equinox.launcher_${equinoxLauncherPluginVersion}.jar" />
			</classpath>
		</java>
		<mkdir dir="${buildBundle}/output/features" />
		<unzip dest="${buildBundle}/output/features">
			<fileset dir="${buildWorkspace}/N">
				<include name="org.eclipse.scout.sdk.feature-N.zip" />
			</fileset>
		</unzip>
	</target>





	<target name="signScoutSdkFeature" depends="internal.signScoutSdkFeature, cleanSign">

		<mkdir dir="${buildBundle}/output/features" />
		<unzip dest="${buildBundle}/output/features">
			<fileset dir="${buildWorkspace}/N">
				<include name="org.eclipse.scout.sdk.feature-N.zip" />
			</fileset>
		</unzip>
		<for param="file">
			<path>
				<fileset dir="${buildBundle}/output/features" includes="*/" />
			</path>
			<sequential>
				<echo message="@@@ @{file}" />
				<!--				<propertyregex override="yes" property="program" input="@{file}" regexp=".*/([^\.]*)\.cpp" replace="\1" />
				<mkdir dir="${obj.dir}/${program}" />
				<mkdir dir="${build.bin.dir}" />
				<cc link="executable" objdir="${obj.dir}/${program}" outfile="${build.bin.dir}/${program}">
					<compiler refid="compiler.options" />
					<fileset file="@{file}" />
					<linker refid="linker-libs" />
				</cc>
				-->
			</sequential>
		</for>
	</target>

	<target name="internal.signScoutSdkFeature" unless="skipSign">
		<move file="${buildWorkspace}/N/org.eclipse.scout.sdk.feature-N.zip" tofile="${signInputFolder}/sign.zip" />
		<ant antfile="sign.xml" target="signAndWaitResult" />
		<move file="${signOutputFolder}/sign.zip" tofile="${buildWorkspace}/N/org.eclipse.scout.sdk.feature-N.zip" />
	</target>
	
	

	<target name="createP2Repository">
		<mkdir dir="${buildWorkspace}/p2Repo" />
		<copy todir="${buildWorkspace}/p2Repo">
			<fileset dir="${buildBundle}/output/features/rtFeature">
				<include name="**/**" />
			</fileset>
			<fileset dir="${buildBundle}/output/features/sdkFeature">
				<include name="**/**" />
			</fileset>
		</copy>
		<java classname="org.eclipse.equinox.launcher.Main" fork="true" failonerror="true">
			<arg line="-application org.eclipse.equinox.p2.publisher.FeaturesAndBundlesPublisher" />
			<arg line="-metadataRepository file:/${buildBundle}/output/p2Repo" />
			<arg line="-artifactRepository file:/${buildBundle}/output/p2Repo" />
			<arg line="-source ${buildWorkspace}/p2Repo" />
			<!--			<arg line="-configs gtk.linux.x86"/> -->
			<arg line="-compress" />
			<arg line="-publishArtifacts" /> 
			<classpath>
				<pathelement location="${workingDir}/eclipse/plugins/org.eclipse.equinox.launcher_${equinoxLauncherPluginVersion}.jar" />
			</classpath>
		</java>
		<echo message="categorize repository" />
		<java classname="org.eclipse.equinox.launcher.Main" fork="true" failonerror="true">
			<arg line="-application org.eclipse.equinox.p2.publisher.CategoryPublisher" />
			<arg line="-metadataRepository file:/${buildBundle}/output/p2Repo" />
			<arg line="-source ${buildBundle}/output/p2Repo" />
			<arg line="-categoryDefinition file:${workspace}/scout.sdk/org.eclipse.scout.sdk.feature/scoutCategory.xml" />
			<arg line="-compress" />
			<arg line="-categoryQualifier" />
			<classpath>
				<pathelement location="${workingDir}/eclipse/plugins/org.eclipse.equinox.launcher_${equinoxLauncherPluginVersion}.jar" />
			</classpath>
		</java>
	</target>
	
	<target name="signP2Repository" depends=" cleanSign" unless="skipSign">
		<delete dir="${buildWorkspace}/p2Repo" />
		<mkdir dir="${buildWorkspace}/p2Repo" />
		<zip destfile="${signInputFolder}/sign.zip">
			<fileset dir="${buildBundle}/output/p2Repo">
				<include name="**/**"/>
			</fileset>
		</zip>
		<ant antfile="sign.xml" target="signAndWaitResult" />
		<mkdir dir="${buildBundle}/output/p2RepoSigned"/>
		<unzip dest="${buildBundle}/output/p2RepoSigned" src="${signOutputFolder}/sign.zip"/>
		<delete>
			<fileset dir="${buildBundle}/output/p2RepoSigned">
				<include name="artifacts.jar"/>
				<include name="contents.jar"/>
			</fileset>
		</delete>
		<java classname="org.eclipse.equinox.launcher.Main" fork="true" failonerror="true">
					<arg line="-application org.eclipse.equinox.p2.publisher.FeaturesAndBundlesPublisher" />
					<arg line="-metadataRepository file:/${buildBundle}/output/p2RepoSigned" />
					<arg line="-artifactRepository file:/${buildBundle}/output/p2RepoSigned" />
					<arg line="-source ${buildBundle}/output/p2RepoSigned" />
					<!--			<arg line="-configs gtk.linux.x86"/> -->
					<arg line="-compress" />
					<arg line="-publishArtifacts" /> 
					<classpath>
						<pathelement location="${workingDir}/eclipse/plugins/org.eclipse.equinox.launcher_${equinoxLauncherPluginVersion}.jar" />
					</classpath>
				</java>
				<echo message="categorize repository" />
				<java classname="org.eclipse.equinox.launcher.Main" fork="true" failonerror="true">
					<arg line="-application org.eclipse.equinox.p2.publisher.CategoryPublisher" />
					<arg line="-metadataRepository file:/${buildBundle}/output/p2RepoSigned" />
					<arg line="-source ${buildBundle}/output/p2RepoSigned" />
					<arg line="-categoryDefinition file:${workspace}/scout.sdk/org.eclipse.scout.sdk.feature/scoutCategory.xml" />
					<arg line="-compress" />
					<arg line="-categoryQualifier" />
					<classpath>
						<pathelement location="${workingDir}/eclipse/plugins/org.eclipse.equinox.launcher_${equinoxLauncherPluginVersion}.jar" />
					</classpath>
				</java>
	</target>

	<target name="publish" unless="skipPublish">
		<!--
		structure:
		- nightlyRepository
		  - N-yyyyMMdd
		    - features
		    - plugins
		    - artifact.jar
		    - content.jar
		  + N-yyyyMMdd-1
		  -artifact.jar
		-->

		<property name="tmpRepo" location="${nightlyRepository}/${nightlyRepositoryName}_tmp" />
		<property name="defRepo" location="${nightlyRepository}/${nightlyRepositoryName}" />
		<delete dir="${defRepo}_unsigned"/>
		<mkdir dir="${defRepo}_unsigned"/>
		<copy todir="${defRepo}_unsigned">
			<fileset dir="${buildBundle}/output/p2Repo">
				<include name="**/**" />
			</fileset>
		</copy>
		
		<mkdir dir="${tmpRepo}" />

		<copy todir="${tmpRepo}">
			<fileset dir="${buildBundle}/output/p2RepoSigned">
				<include name="**/**" />
			</fileset>
		</copy>

		<delete dir="${defRepo}" />
		<move file="${tmpRepo}" tofile="${defRepo}" />
	</target>


</project>